name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to deploy'
        required: true
        type: string

env:
  REGISTRY_ID: ${{ secrets.REGISTRY_ID }}
  DOCKER_IMAGE: cr.yandex/${{ secrets.REGISTRY_ID }}/app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check if image exists
      run: |
        # Проверяем существование образа с тегом latest
        docker pull ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.release_version }}_latest || exit 1
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Останавливаем старый контейнер
          docker stop shri-infra-app || true
          docker rm shri-infra-app || true
          
          # Удаляем старый образ
          docker rmi ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.release_version }}_latest || true
          
          # Логинимся в Container Registry
          echo ${{ secrets.YC_SERVICE_ACCOUNT_KEY }} | docker login --username ${{ secrets.YC_SERVICE_ACCOUNT_ID }} --password-stdin cr.yandex
          
          # Скачиваем новый образ
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.release_version }}_latest
          
          # Запускаем новый контейнер
          docker run -d \
            --name shri-infra-app \
            --restart unless-stopped \
            -p 80:3000 \
            ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.release_version }}_latest
    
    - name: Comment on Release Issue
      uses: actions/github-script@v7
      with:
        script: |
          // Ищем issue с релизом
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: []
          });
          
          const releaseIssue = issues.find(issue => 
            issue.title.includes(`Release v${{ github.event.inputs.release_version }}`)
          );
          
          if (releaseIssue) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: releaseIssue.number,
              body: `## Deployment Information
          
          **Date:** ${new Date().toISOString().split('T')[0]}
          **Deployed by:** ${context.actor}
          **Version:** ${{ github.event.inputs.release_version }}
          
          ✅ Successfully deployed to production server
          
          **Server URL:** http://${{ secrets.SERVER_HOST }}`
            });
          } 
